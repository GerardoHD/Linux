#!/bin/bash
echo	------==Script Creado por GerardoHD==------
echo https://www.github.com/GerardoHD/Linux
echo Script creado para crear finalizar instalación de Arch Linux
echo Se distribuye con la esperanza de que sea útil, pero sin ninguna garantía
sleep 2s
echo Se aconseja usar este script solo una vez despúes de instalar Arch Linux
echo ya que luego los Hooks de Pacman automáticamente regeneran y firman los
echo archivos .efi para Secure Boot
#
#Configurar la zona horaria en CDMX:
ln -sf /usr/share/zoneinfo/America/Mexico_City /etc/localtime
#
#Generar /etc/adjtime (este comando asume que el reloj del hardware esta en UTC):
hwclock --systohc
#
#Establecer el nombre de Sistema:
echo Arch >> /etc/hostname
#
#Establecer la distribución del teclado:
echo KEYMAP=la-latin1 >>/etc/vconsole.conf
#
#Establecer la localización:
echo LANG=es_MX.UTF-8 >> /etc/locale.conf
#
#Activar la localización:
sed -i 's/#es_MX.UTF-8/es_MX.UTF-8/g' /etc/locale.gen
#
echo Generando localización:
locale-gen
#
#Desactivar fallback initrd.img
sed -i 's/PRESETS=('default' 'fallback')/PRESETS=('default')/g' /etc/mkinitcpio.d/linux.preset
#
echo Modificando mkinitcpio.conf:
sed -i 's/HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)/HOOKS=(systemd autodetect modconf sd-vconsole block filesystems keyboard)/g' /etc/mkinitcpio.conf
mkinitcpio -p linux
#
echo Creando un usuario:
useradd -m -g users -G audio,games,input,lp,optical,power,scanner,storage,sys,video,wheel, -s /bin/bash user
#
echo Activando NetworkManager:
systemctl enable NetworkManager.service
#
echo -=Instalando Systemd-boot=-
bootctl --path=/boot install
#
echo -=Creando Imagen de Kernel Unificada=-
#
#Crear carpetas, cmdline.txt y limpiar archivos innecesarios
mkdir -p /boot/efi/Linux
mkdir -p /root/Arch-UKI
echo root=LABEL=Arch quiet loglevel=1 vga=current rd.systemd.show_status=auto rd.udev.log_priority=3 random.trust_cpu=on > /root/Arch-UKI/cmdline.txt
rm /boot/initramfs-linux-fallback.img
#Uniendo ucode y initramfs
cat /boot/intel-ucode.img /boot/initramfs-linux.img >> /root/Arch-UKI/Initramfs.img
#cat /boot/amd-ucode.img /boot/initramfs-linux.img >> /root/Arch-UKI/Initramfs.img
#
objcopy \
    --add-section .osrel="/etc/os-release"                              --change-section-vma .osrel=0x20000    \
    --add-section .cmdline="/root/Arch-UKI/cmdline.txt"                 --change-section-vma .cmdline=0x30000  \
    --add-section .splash="/usr/share/systemd/bootctl/splash-arch.bmp"  --change-section-vma .splash=0x40000   \
    --add-section .linux="/boot/vmlinuz-linux"                          --change-section-vma .linux=0x2000000  \
    --add-section .initrd="/root/Arch-UKI/Initramfs.img"                --change-section-vma .initrd=0x3000000 \
    /usr/lib/systemd/boot/efi/linuxx64.efi.stub /boot/efi/Linux/Arch.efi
#
echo -=Creando entrada NVRAM de Arch.efi=-
efibootmgr --create --disk /dev/sda --part 27 --label "Arch Linux" --loader "\efi\Linux\Arch.efi" --verbose
#
#echo -=Creando entrada NVRAM de CloudReady=-
#efibootmgr --create --disk /dev/sda --part 27 --label "CloudReady" --loader "\efi\boot\grubx64.efi" --verbose
#
#echo Creando CloudReady.conf para Systemd-boot
#echo >> CloudReady.conf
#sed -i '$ a\title CloudReady' CloudReady.conf
#sed -i '$ a\efi /efi/boot/grubx64.efi' CloudReady.conf
#mv CloudReady.conf /boot/loader/entries/CloudReady.conf
